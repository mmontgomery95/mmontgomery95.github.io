<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Personal Progress Blog</title>
    <description>Tracking Professional and Educational Progress</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <author>
      <name>Morgan Montgomery</name>
      <email>morgan.montgomery95@gmail.com</email>
      <uri>https://mmontgomery95.github.io/</uri>
    </author>
    
      <item>
        <title>Creating a Database Class</title>
        <description>&lt;p&gt;One of the fundamental pieces of the City XR project is the Database class. This class is essential in defining how the program interacts with its data by creating the database schemas - a new schema for each data source - and storing our data, as well as information about the data retrieval, within them. Each data source’s schema contains the following information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data source logs&lt;/li&gt;
  &lt;li&gt;Run history&lt;/li&gt;
  &lt;li&gt;Historical raw data intake&lt;/li&gt;
  &lt;li&gt;Current raw data intake&lt;/li&gt;
  &lt;li&gt;Historical cleaning information&lt;/li&gt;
  &lt;li&gt;Current cleaning information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This provides the user with critical information as to the performance of a data source’s plugin such as how long it’s been actice, and rates of succesful and unsuccesful runs.&lt;/p&gt;

&lt;p&gt;Once the plugin has started running, the Database class starts working. It first checks to see if the data source has a schema created already; if not, it will create one. It also creates the &lt;code class=&quot;highlighter-rouge&quot;&gt;logs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;runs&lt;/code&gt; schemas.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Logs
    id
    time
    severity
    message
    run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Runs
    id
    started_at
    ended_at
    state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the plugin runs, the Database class receives the newly retrieved data and gets to work creating tables in which to store it as it’s used. Four tables are used in this process. Data is received into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Current Raw Data&lt;/code&gt; table. From there the data will be cleaned up for use, and entered into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Current Clean Data&lt;/code&gt; table. The data in these tables will eventually be added to &lt;code class=&quot;highlighter-rouge&quot;&gt;Historical Raw Data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Historical Clean Data&lt;/code&gt;, respectively. At the beginning of the next run, both Current tables will be emptied to receive the new data.&lt;/p&gt;

&lt;p&gt;The Database class is also responsible for updating the status of the run, through three functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;begin_run&lt;/code&gt;, beginning the run and providing the start time; &lt;code class=&quot;highlighter-rouge&quot;&gt;update_run&lt;/code&gt;, providing status updates as the program runs; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end_run&lt;/code&gt;, completing the run and providing the end time as well as a final status update. This information is all collected within the Runs schema.&lt;/p&gt;

&lt;p&gt;Finally, the Database class is able to provide information about the run itself. Within the Logs schema, messages are stored related to the success of the program and anything the user might need to know, such as if the run failed and why.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2020 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//dbclass</link>
        <link href="http://localhost:4000/dbclass"/>
        <guid isPermaLink="true">http://localhost:4000/dbclass</guid>
      </item>
    
      <item>
        <title>Data Source Class Logic</title>
        <description>&lt;p&gt;Over this past weekend, we did a near complete rewrite of how we handle data sources. Previously, there was a single &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt; parent class from which we derived our three subclasses, each representing a different type of data, and then a plugin through which the user could implement their own data source and override our basic methods.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DataSource (baseclass) 
    --&amp;gt; WebDataSource (subclass for specific data type) 
        --&amp;gt; Plugin (contains user overrides)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Through this method, the base class would specify the vast majority of the logic. The subclass then inherits &lt;code class=&quot;highlighter-rouge&quot;&gt;abstractmethods&lt;/code&gt; which tell the program what to do with the data source, and tweaks them to its own specifications, and from there the user receives them and alters them further to meet their needs (i.e. getting specified data from a webscrape).&lt;/p&gt;

&lt;p&gt;This method introduced several issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How do we inform the base class constructor of the user overrides?&lt;/li&gt;
  &lt;li&gt;Each function is implemented three times, each time more focused than the last&lt;/li&gt;
  &lt;li&gt;If the user needs to override the functions anyway, why implement the generalized functions at all, rather than just implementing the specific ones at the user end?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was overcomplicated, to put it simply. We only needed to do a handful of tasks: fetch the data, clean it up, and insert it into the database, and run all of that automatically on a schedule.&lt;/p&gt;

&lt;p&gt;We’ve now completely removed the tangle of classes, keeping only the base &lt;code class=&quot;highlighter-rouge&quot;&gt;DataSource&lt;/code&gt; class. Methods are defined once within the user files; they can still be overridden as necessary, but serve as a base function to fall back on. Each data type on our end is now treated the same, and it will be up to the user to prepare that data to be collected, rather than build functions to identify the datasource and what to do with it.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Mar 2020 00:00:00 -0500</pubDate>
        <link>http://localhost:4000//logic</link>
        <link href="http://localhost:4000/logic"/>
        <guid isPermaLink="true">http://localhost:4000/logic</guid>
      </item>
    
      <item>
        <title>Plugins</title>
        <description>&lt;p&gt;Making sense of the currently created plugins for this project.
From there, implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;file_data_source&lt;/code&gt; plugin (I believe).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;-Files-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Constructor which tells python that the directory is a module&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data_source.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;creates &lt;code class=&quot;highlighter-rouge&quot;&gt;Datasource&lt;/code&gt; class containing following functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;migrate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;clean&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;persist&lt;/code&gt;; currently stubs, will add methods later&lt;/li&gt;
  &lt;li&gt;class is imported in following plugin files to create various data sources (file, HTTP, web)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;file_data_source.py&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;http_data_source.py&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;web_data_source.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;creates classes which call &lt;code class=&quot;highlighter-rouge&quot;&gt;super().__init__()&lt;/code&gt; - inherits methods from &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; class&lt;/li&gt;
  &lt;li&gt;context tells me each class creates the related data source, but not sure how&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Following logic, should call on these files; only calls &lt;code class=&quot;highlighter-rouge&quot;&gt;user_plugins&lt;/code&gt; directory, which does not contain all plugins &lt;em&gt;(possibly implementing others as we go?)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Loops over &lt;code class=&quot;highlighter-rouge&quot;&gt;user_plugins&lt;/code&gt; directory, loads and evaluates them, then calls indicated method on them&lt;/li&gt;
  &lt;li&gt;Creates &lt;code class=&quot;highlighter-rouge&quot;&gt;load_plugins&lt;/code&gt; function&lt;/li&gt;
  &lt;li&gt;Tried to run file; received custom error message: “EnvValidationError: Environment variable “DEBUG” not set”&lt;/li&gt;
  &lt;li&gt;Running the program calls on &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;, thereafter containing all relevant arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Key Terms&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;constructor -   special type of method used to initialize instance members of a class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;      -   refers to the current instance of an object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt;   -   calls inherited methods from a parent or sibling class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.eager&lt;/code&gt;-   &lt;em&gt;???&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</description>
        <pubDate>Thu, 27 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//plugins</link>
        <link href="http://localhost:4000/plugins"/>
        <guid isPermaLink="true">http://localhost:4000/plugins</guid>
      </item>
    
      <item>
        <title>Stuck in a Ubuntu Login Loop</title>
        <description>&lt;p&gt;Ubuntu apparently has a known bug throughout various versions of sticking people in a login loop, wherein the incorrect password is objected to but a correct password loops back to the user-select screen. The immediate answer, according to most sources, is that &lt;code class=&quot;highlighter-rouge&quot;&gt;Xauthority&lt;/code&gt;, a graphics file, has an incorrect user/permission set.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;from login screen, go into terminal with &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + alt + f2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;check permissions with &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lah | grep -i Xauthority&lt;/code&gt; (specific flags to look for the hidden file)&lt;/li&gt;
  &lt;li&gt;if owner is &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;, change it to the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next most likely culprit is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tmp&lt;/code&gt; file&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;from terminal, enter &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ls -lah /tmp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;permissions for &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; should be &lt;code class=&quot;highlighter-rouge&quot;&gt;drwxrwxrwt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neither of those worked for my situation. TIL there’s a problem with auto-login on Ubuntu 19.10, which requires the user to update Grub options.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reboot into &lt;code class=&quot;highlighter-rouge&quot;&gt;recovery mode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount -o rw,remount /           # get write permission
sudo nano /etc/default/grub     # edit grub options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;remove the word “splash” from the &lt;code class=&quot;highlighter-rouge&quot;&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo update-grub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rebooted, got in, turned off auto login, supposedly everything works again. Keeping fingers crossed.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//loginLoop</link>
        <link href="http://localhost:4000/loginLoop"/>
        <guid isPermaLink="true">http://localhost:4000/loginLoop</guid>
      </item>
    
      <item>
        <title>Creating a Project Landing Page</title>
        <description>&lt;p&gt;Building a landing page using Bootstrap4. Starting with template from the &lt;a href=&quot;https://getbootstrap.com/docs/4.4/getting-started/introduction/&quot;&gt;Bootstrap&lt;/a&gt; website. This is mostly a refresher, but it’s been a long time since I’ve touched any of this. Most customization options are documented on the Bootstrap site for convenience.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Creating a Navigation Bar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Define the &lt;code class=&quot;highlighter-rouge&quot;&gt;nav class&lt;/code&gt;, specify what your buttons will look like; create &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; classes within each other to hold your list of links. Each link within the navbar is its own item.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sections&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each block of the page is contained within a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;section&amp;gt;&lt;/code&gt;. Each section gets a class for navigation purposes. Sections used for this project include jumbotron, description, features&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jumbotron&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; in navigation&lt;/li&gt;
  &lt;li&gt;Contains page title, descriptive flavor text, and important links&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is this project?&lt;/li&gt;
  &lt;li&gt;Overview of what the project is and does&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Contains a few key features of the product&lt;/li&gt;
  &lt;li&gt;Each feature contains a &lt;em&gt;read more&lt;/em&gt; to keep the page clean&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Cards&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each card uses a very large block of code&lt;/li&gt;
  &lt;li&gt;Looks nice, handy, but hard to find anything within the code&lt;/li&gt;
  &lt;li&gt;Great for short lists (i.e. pricing info)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beyond that point, most additions were cosmetic and CSS-based.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Things to come back to&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Items that were covered in the tutorials used, but didn’t pertain to the project:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Adding videos&lt;/li&gt;
  &lt;li&gt;Carousel&lt;/li&gt;
  &lt;li&gt;Review blurbs&lt;/li&gt;
  &lt;li&gt;User input (i.e. newsletters)
I’d like to come back to these when I have free time to put together one large website project for the sake of knowing how to do these things.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 21 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//landingPage</link>
        <link href="http://localhost:4000/landingPage"/>
        <guid isPermaLink="true">http://localhost:4000/landingPage</guid>
      </item>
    
      <item>
        <title>Local Environments and Beautifulsoup</title>
        <description>&lt;p&gt;&lt;strong&gt;Local Environments&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 -m venv my_env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Creates a local programming environment&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source my_env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Activates and enters the local environment &lt;code class=&quot;highlighter-rouge&quot;&gt;my_env&lt;/code&gt;. From here, files can be written to execute code 
as you would within any other compiler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beautifulsoup&lt;/strong&gt; is a program used for scraping webpages; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;.find_all(ARG)&lt;/code&gt; command allows you 
to search a webpage for every instance of an argument, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;.
Using this with the local environment allows the user to instantly pass arguments and receive results, making it much easier to search through a webpage.&lt;/p&gt;

&lt;p&gt;Webscraping is at its core an organizational logic puzzle; getting desired results means finding within a page’s source code each unique tag to narrow down where the target information is located. Depending on the amount of information desired, and the layout of the page, this could mean any number of nested tags before reaching the actual data.&lt;/p&gt;

&lt;p&gt;Once the correct data is received, it then is formatted to be displayed. For my purposes, I put my data into a .csv file. In my sample .csv, I took a webpage with a list of Texas counties. Once I pared down the retrieved data to contain only the string with the county name, county seat, and link to information, I separated out the string using &lt;code class=&quot;highlighter-rouge&quot;&gt;split(&quot;,&quot;)&lt;/code&gt; to separate into multiple strings wherever a comma was, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;strip()&lt;/code&gt; to remove whitespace. This gave me the ability to pull multiple data points from a single string.&lt;/p&gt;

</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//bsoup1</link>
        <link href="http://localhost:4000/bsoup1"/>
        <guid isPermaLink="true">http://localhost:4000/bsoup1</guid>
      </item>
    
      <item>
        <title>Converting an SQLite database to PostgreSQL</title>
        <description>&lt;p&gt;Using the same base code/files, the Todo Flask app now works for PostgreSQL using pysopg2.&lt;/p&gt;

&lt;p&gt;Key changes/differences:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Wrote a function to run a query, rather than writing the same few lines inside each function within the helper file&lt;/li&gt;
  &lt;li&gt;String arguments must be indicated with &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt;, whereas previously &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; was used&lt;/li&gt;
  &lt;li&gt;SQLite allowed for a simple path specification; psycopg2 needed a much more specific path laid out&lt;/li&gt;
  &lt;li&gt;psycopg2 requires the connection to be closed when you’re finished with it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the time on this project was spent debugging, as a majority of the code was already written and ready to go with the SQLite app- most, if not all, changes were done within the helper file. The major takeaway was to insert &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; lines throughout the code to determine where exactly the issues were, as the terminal didn’t always specify.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//postgres</link>
        <link href="http://localhost:4000/postgres"/>
        <guid isPermaLink="true">http://localhost:4000/postgres</guid>
      </item>
    
      <item>
        <title>Building a Todo App with Flask in Python</title>
        <description>&lt;p&gt;Step one: running python3 instead of python2.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias python=python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Step one complete.&lt;/p&gt;

&lt;p&gt;Next: Creating and cloning the git repository. Creating is straightforward; clone using following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo git clone https://github.com/USERNAME/REPONAME.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;sudo grants permission to run the command&lt;/li&gt;
  &lt;li&gt;URL retrieved from “clone repository” option in browser&lt;/li&gt;
  &lt;li&gt;make sure correct directory is set before running command&lt;/li&gt;
  &lt;li&gt;permissions must be set for directory before work is able to be done within it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install Flask&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“framework for Python to develop web applications”&lt;/li&gt;
  &lt;li&gt;later: check out Django, potential alternative to Flask&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;can get a “Hello World” on server&lt;/li&gt;
  &lt;li&gt;basic database created&lt;/li&gt;
  &lt;li&gt;created function to establish connection w/ database &amp;amp; execute insert query&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;make first module run correctly. Syntax errors galore; not functioning even after copy/pasting code from site&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 07 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//flaskTutorial</link>
        <link href="http://localhost:4000/flaskTutorial"/>
        <guid isPermaLink="true">http://localhost:4000/flaskTutorial</guid>
      </item>
    
      <item>
        <title>Publishing Changes to the Site</title>
        <description>&lt;p&gt;Minor documentation, mostly for my own purposes, of various commands used to create and publish changes to this site.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build
jekyll b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Builds my site&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve
jekyll s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Builds site for local viewing; preview what changes will look like without actually publishing&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Shows the files which have been changed but not yet committed to github&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -a -m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Commits files to the repository, with message for documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Send local changes in current branch to its remote counterpart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next on the docket: visuals. The current beast of burden is attempting to change the theme that was initially set; the decision must be made whether to set an entirely new theme, or customize the CSS of the current theme to my liking.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jan 2020 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//stp</link>
        <link href="http://localhost:4000/stp"/>
        <guid isPermaLink="true">http://localhost:4000/stp</guid>
      </item>
    
  </channel>
</rss>
